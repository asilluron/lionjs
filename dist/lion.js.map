{"version":3,"sources":["lion.js","form.js"],"names":[],"mappings":"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","file":"lion.js","sourcesContent":["export default function Lion(schema) {\n    var _self = this;\n    var parentModule;\n\n    if (!schema.form && !schema.model) {\n        throw new Error(\"Schema must contain either a `form` or `model` property at the top level\");\n    }\n\n    parentModule = angular.module(schema.moduleName, []);\n\n    Object.keys(schema.form).forEach((field) => {\n        formBuilder(field, schema.form[field], parentModule);\n    });\n\n    return parentModule;\n}\n","function formBuilder(fieldName, fieldSchema, angularModule) {\n    //TODO Move this to an external JSON file\n\n    /** make this dynamic\n    var script = document.createElement('script');\n    script.type = \"text/ng-template\";\n   // script1.id = \"error-messages\";\n    script.innerHTML = '<div ng-message=\"required\">This field is required</div><div ng-message=\"min\">This field is too short</div>';\n\n    document.getElementsByTagName('head')[0].appendChild(script1);\n\n    **/\n\n    angularModule.directive(fieldName + \"Validator\", ($q) => {\n\n        var directiveDefinitionObject = {\n            priority: 0,\n            transclude: false,\n            restrict: 'A',\n            templateNamespace: 'html',\n            scope: false,\n            require: 'ngModel',\n            controller: function ($scope, $element, $attrs, $transclude) {},\n            controllerAs: 'stringIdentifier',\n            bindToController: false,\n            link: function postLink(scope, elem, attrs, NgModelCtrl) {\n                var schema = Joi[fieldSchema.type]();\n                fieldSchema.validators.forEach((validator) => {\n\n                    var validatorArg = null;\n\n                    if (typeof validator === \"object\") {\n                        validatorArg = validator[Object.keys(validator)[0]];\n                        if (!Array.isArray(validatorArg)) {\n                            validatorArg = [validatorArg];\n                        }\n                        validator = Object.keys(validator)[0];\n                    }\n\n                    if (typeof schema[validator] === \"function\") {\n                        NgModelCtrl.$asyncValidators[validator] = (modelValue, viewValue) => {\n                            var microSchema;\n                            if (validatorArg) {\n                                microSchema = schema[validator].apply(schema, validatorArg);\n                            } else {\n                                microSchema = schema[validator]();\n                            }\n\n                            var value = modelValue || viewValue;\n                            var validationDeferal = $q.defer();\n\n                            Joi.validate(value, microSchema, (err, val) => {\n                                if (err) {\n                                    validationDeferal.reject(err);\n                                } else {\n                                    validationDeferal.resolve(true);\n                                }\n                            });\n\n                            return validationDeferal.promise;\n                        }\n                    } else {\n\n                    }\n                });\n            }\n        };\n        return directiveDefinitionObject;\n    });\n}\n"],"sourceRoot":"/source/"}